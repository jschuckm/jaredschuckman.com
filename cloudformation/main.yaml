AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless website
Resources:
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:900854203989:certificate/85652b11-fef7-4a14-bc6e-79a872ec1874
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          # LambdaFunctionAssociations:
          #   - EventType: origin-request
          #     LambdaFunctionARN: !Ref RewriteLambda.Version
            # - EventType: viewer-response
            #   LambdaFunctionARN: !Ref SecureHeadersLambda.Version
        Aliases: 'jaredschuckman.com,www.jaredschuckman.com'

  # WebsiteCloudfrontDistribution:
  #   Type: "AWS::CloudFront::Distribution"
  #   Properties:
  #     DistributionConfig:
  #       #Aliases:
  #       #    - <ADD YOU ALIASES HERE>
  #       Comment: "Cloudfront distribution for serverless website"
  #       # ViewerCertificate:
  #       #   AcmCertificateArn: arn:aws:acm:us-east-1:900854203989:certificate/85652b11-fef7-4a14-bc6e-79a872ec1874
  #       #   MinimumProtocolVersion: TLSv1.1_2016
  #       #   SslSupportMethod: sni-only
  #       DefaultRootObject: "index.html"
  #       Enabled: true
  #       HttpVersion: http2
  #       Origins:
  #         - Id: s3-website
  #           DomainName: !GetAtt S3Bucket.DomainName
  #           S3OriginConfig: 
  #             OriginAccessIdentity: 
  #               Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
  #       DefaultCacheBehavior:
  #         Compress: 'true'
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #         ForwardedValues:
  #           QueryString: false
  #         TargetOriginId: s3-website
  #         ViewerProtocolPolicy : redirect-to-https
  #         LambdaFunctionAssociations:
  #           - EventType: origin-request
  #             LambdaFunctionARN: !Ref RewriteLambda.Version
  #           - EventType: viewer-response
  #             LambdaFunctionARN: !Ref SecureHeadersLambda.Version

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Change bucket name to reflect your website
      BucketName: jaredschuckman.com

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
      # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
  
  # LambdaEdgeFunctionRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     Path: '/'
  #     ManagedPolicyArns:
  #       - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Sid: "AllowLambdaServiceToAssumeRole"
  #           Effect: "Allow"
  #           Action: 
  #             - "sts:AssumeRole"
  #           Principal:
  #             Service: 
  #               - "lambda.amazonaws.com"
  #               - "edgelambda.amazonaws.com"

  # RewriteLambda:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: rewrite/
  #     Description: 'Serverless rewrite lambda'
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs12.x
  #     MemorySize: 128
  #     Timeout: 1
  #     Role: !GetAtt LambdaEdgeFunctionRole.Arn
  #     AutoPublishAlias: live
  
  # SecureHeadersLambda:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: secureheaders/
  #     Description: 'Serverless secure headers lambda'
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs12.x
  #     MemorySize: 128
  #     Timeout: 1
  #     Role: !GetAtt LambdaEdgeFunctionRole.Arn
  #     AutoPublishAlias: live

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig: 
        Comment: jaredschuckman.com hosted zone
      Name: jaredschuckman.com
  RecordA:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudfrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: jaredschuckman.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  RecordAAAA:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudfrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: jaredschuckman.com
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  RecordWWWA:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudfrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: www.jaredschuckman.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  RecordWWWAAAA:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudfrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: www.jaredschuckman.com
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudfrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2